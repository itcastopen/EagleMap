{"version":3,"file":"static/js/75.d8684f0c.chunk.js","mappings":"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","sources":["utils/request.ts","api/api.ts","components/React-CMap.tsx","pages/trajectory/details.tsx","utils/tool.ts"],"sourcesContent":["import axios, { AxiosRequestConfig, AxiosError, AxiosResponse } from 'axios';\nimport { MessagePlugin } from 'tdesign-react';\nimport { getToken, removeToken } from '../utils/cookie';\n\ninterface ResponseData<T> {\n  code: number;\n  data: T;\n  msg: string;\n}\n\n// 指定 axios 请求类型\n(axios.defaults.headers as any) = {\n  'Content-Type': 'application/json;charset=utf-8',\n};\n\n// 指定请求地址\naxios.defaults.baseURL = '' // : 'https://mock.boxuegu.com/mock/2894/';\n\n// 添加请求拦截器\naxios.interceptors.request.use(\n  (config: AxiosRequestConfig ) => {\n    const token = getToken();\n    // 获取用户token，用于校验\n    /* eslint-disable  no-param-reassign */\n    if (token) {\n      (config.headers as any).Authorization = token;\n    }\n    return config;\n  },\n  (error: AxiosError) => Promise.reject(error),\n);\n\n// 添加响应拦截器，拦截登录过期或者没有权限\n\naxios.interceptors.response.use(\n  (response: AxiosResponse<ResponseData<any>>) => {\n    if (!response.data) {\n      return Promise.resolve(response);\n    }\n    // 请求成功\n    if (response.status === 200) {\n      return response.data as any;\n    }\n    // token 超时 失效\n    if (response.status === 401 || response.data.code === 401) {\n      removeToken()\n      window.location.href = '/login'\n    }\n\n    // 请求成功，状态不为成功时\n    MessagePlugin.error(response.data.msg);\n\n    return Promise.reject(new Error(response.data.msg));\n  },\n  (error: AxiosError) => {\n    MessagePlugin.error(error.message);\n    const status = error.response!.status\n    if (status === 401) {\n      removeToken()\n      window.location.href = '/login'\n    } else {\n      return Promise.reject(error);\n    }\n  },\n);\n\n// 统一发起请求的函数\nexport function request<T>(options: AxiosRequestConfig) {\n  return axios.request<T>(options);\n}\n","import { request } from '../utils/request';\n// import { UserState } from '../store/module/user';\n\nexport interface UserLoginDataRq  {\n  code: number,\n  msg: string,\n  data: {\n    token: string\n  }\n}\n\nexport interface UserLoginData {\n  userName: string;\n  password: string;\n}\n\n// 登录接口\nexport function apiUserLogin(data: UserLoginData) {\n  return request<UserLoginDataRq>({\n    method: 'POST',\n    url: '/sys/login',\n    data,\n    params:data,\n  });\n}\n\n// 系统配置\nexport function apiSysConfig() {\n  return request<UserLoginDataRq>({\n    method: 'GET',\n    url: '/sys/config',\n  });\n}\n\n// 轨迹服务管理\nexport function apiTraceServer(data: any) {\n  return request<UserLoginDataRq>({\n    method: 'GET',\n    url: '/sys/trace/server',\n    data,\n    params:data,\n  });\n}\n\n// 轨迹列表\nexport function apiTraceList(data: any) {\n  return request<UserLoginDataRq>({\n    method: 'GET',\n    url: '/sys/trace',\n    data,\n    params:data,\n  });\n}\n// 轨迹缩略图\nexport function apiTraceImgUrl(data: any) {\n  return request<UserLoginDataRq>({\n    method: 'GET',\n    url: '/sys/trace/image',\n    data,\n    params:data,\n  });\n}\n// 删除轨迹\nexport function apiDeleteTrace(data: any) {\n  return request<UserLoginDataRq>({\n    method: 'DELETE',\n    url: `/sys/trace/${data.id}`,\n    data,\n    params:data,\n  });\n}\n\n// 电子围栏列表\nexport function apiFenceList(data: any) {\n  return request<UserLoginDataRq>({\n    method: 'GET',\n    url: '/sys/fence',\n    data,\n    params:data,\n  });\n}\n\n// 电子围栏列表详情\nexport function apiFenceDetails(data: any) {\n  return request<UserLoginDataRq>({\n    method: 'GET',\n    url: `/sys/fence/${data.fenceId}`,\n    data,\n  });\n}\n// 删除电子围栏\nexport function apiDeleteFence(data:any) {\n  return request<UserLoginDataRq>({\n    method: 'DELETE',\n    url: `/sys/fence/${data.fenceId}`,\n    data,\n    params:data\n  });\n}\n// 终端列表\nexport function apiTerminal(data: any) {\n  return request<UserLoginDataRq>({\n    method: 'GET',\n    url: '/sys/terminal',\n    data,\n    params:data,\n  });\n}\n\n// 删除终端\nexport function apiDeleteTerminalld(data:any) {\n  return request<UserLoginDataRq>({\n    method: 'DELETE',\n    url: `/sys/terminal/${data.id}`,\n    data,\n    params:data\n  });\n}","import { Component, ReactNode } from \"react\";\n\nimport  CMap, { CZMapTP }  from 'czmap';\n\ntype Props = {\n    options: CZMapTP\n}\nexport class CZMap extends Component<Props> {\n    \n    componentDidMount(){\n        new CMap(this.props.options)\n    }\n\n    render(): ReactNode {\n        return (<div id=\"baidumap\" style={{width: '100%', height: '560px'}} ></div>)\n    }\n}","import { Table } from \"tdesign-react\";\nimport {CZMap} from './../../components/React-CMap'\nimport {pathChangeHandle, timeFormat} from '../../utils/tool'\nimport { Breadcrumb } from 'tdesign-react';\nimport moment from 'moment'\nimport { useEffect, useState } from \"react\";\nimport { apiTraceImgUrl } from \"../../api/api\";\nconst { BreadcrumbItem } = Breadcrumb;\n\nfunction TrajectoryDetails(props: any) {\n  const listData = props.location.state\n  const pathData = JSON.parse(listData.pointList)\n  const type = listData.provider === 'BAIDU' ? 'BMAP' : listData.provider\n  const drivingPath = pathData ? pathChangeHandle(type,pathData) : [];\n  const [imgURL, setImgUsrl] = useState('')\n  const options = {\n    id: 'baidumap', // 配置地图的着陆点  id\n    mapAk: '', // 写入Ak\n    poiText: true, //是否显示POI信息\n    poiIcon: true, //是否显示POI图标信息\n    type, // 设置使用地图的类型 BMAP 百度地图、 TMAP 腾讯、、AMAP 高德\n    points: [116.404, 39.915], // 中心点设置 \n    areaName: '上海市', // 中心城市\n    zoom: 15, // 缩放级别 \n    enableScrollWheel: false, // 开启滚轮\n    isScaleCtrl: true, // 添加比例尺控件\n    isZoomCtrl: true, // 添加缩放控件\n    navi3DCtrl: true, // 添加3D控件\n    drivingPath,\n  }\n\n  useEffect(() => {\n    gettrajectoryImgUrl()\n  }, [])\n  // 获取轨迹缩略图\n  function gettrajectoryImgUrl(){\n    const {provider, serverId, terminalId, traceId} = listData\n    apiTraceImgUrl({provider, serverId, terminalId, traceId, param: '{ local: true}', width: 30, height: 30}).then(res => {\n      if((res as any).code != 1){\n        setImgUsrl(`/sys/trace/image?provider=${provider}&serverId=${serverId}&terminalId=${terminalId}&traceId=${traceId}&param=%7B%22local%22:true%7D&width=300&height=300`)\n      }\n    })\n  }\n\n  return (\n    <>\n      <div className=\"BreadcrumbCont\">\n        <Breadcrumb maxItemWidth=\"200px\" theme=\"light\">\n          <BreadcrumbItem href='/trajectory'>轨迹</BreadcrumbItem>\n          <BreadcrumbItem>详情</BreadcrumbItem>\n        </Breadcrumb>\n      </div>\n      <div className=\"container trajectory_details\">\n        <div className=\"detailCont\">\n        <Table\n            data={[listData]}\n            columns={[\n              {\n                align: \"left\",\n                className: \"test\",\n                ellipsis: true,\n                colKey: \"name\",\n                title: \"轨迹名称\",\n              },\n              {\n                align: \"left\",\n                className: \"test4\",\n                ellipsis: true,\n                colKey: \"id\",\n                title: \"轨迹ID\",\n              },\n              {\n                align: \"left\",\n                className: \"test4\",\n                ellipsis: true,\n                cell({ row }) {\n                  switch (row?.provider) {\n                    case \"BAIDU\":\n                      return <>百度地图</>;\n                    case \"AMAP\":\n                      return <>高德地图</>;\n                    case \"QQ\":\n                      return <>腾讯地图</>;\n                    default:\n                      return null;\n                  }\n                },\n                title: \"服务商\",\n                minWidth: 200,\n              },\n              {\n                align: \"left\",\n                className: \"test4\",\n                ellipsis: true,\n                colKey: \"serverId\",\n                title: \"服务ID\",\n                minWidth: 200,\n              },\n              {\n                align: \"left\",\n                className: \"test4\",\n                ellipsis: true,\n                colKey: \"distance\",\n                title: \"轨迹长度\",\n                cell({ row }) {\n                  return row?.distance ? row?.distance.toFixed(2) : '--'\n                },\n                minWidth: 200,\n              },\n              {\n                align: \"left\",\n                className: \"test4\",\n                ellipsis: true,\n                colKey: \"time\",\n                title: \"持续时间\",\n                cell({row}){\n                  return timeFormat(row.time)\n                },\n                minWidth: 200,\n              },\n              {\n                align: \"left\",\n                className: \"test4\",\n                ellipsis: true,\n                colKey: \"startTime\",\n                cell({row}){\n                  return row.startTime ? moment(row.startTime).format(\"YYYY-MM-DD HH:mm:ss\") : '--';\n                },\n                title: \"创建时间\",\n                minWidth: 200,\n              },\n              {\n                align: \"left\",\n                className: \"test4\",\n                ellipsis: true,\n                colKey: \"endTime\",\n                cell({row}){\n                  return row.endTime ? moment(row.endTime).format(\"YYYY-MM-DD HH:mm:ss\") : '--';\n                },\n                title: \"结束时间\",\n                minWidth: 200,\n              },\n              {\n                align: \"left\",\n                className: \"test4\",\n                ellipsis: true,\n                colKey: \"size\",\n                title: \"轨迹点数\",\n                minWidth: 200,\n              },\n            ]}\n            rowKey=\"index\"\n            verticalAlign=\"top\"\n            bordered\n            hover\n          ></Table>\n          <div className=\"DetBMap\">\n            {imgURL && <img src={imgURL} />}\n            <CZMap options={options} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default TrajectoryDetails\n","\n// 地图路径转换 后台数据转对应数据\nexport function pathChangeHandle(type:string, path:{string:any}[]):[]{\n    let pathList:any = [];\n    if (type === 'BMAP'){\n      pathList = path.map((it:any) => ({'lng': it.longitude, 'lat': it.latitude}))\n    } else if (type === 'AMAP'){\n      pathList = path.map((it:any) => {\n        const point = it.location.split(',')\n        return {'lng':point[0], 'lat':point[1]}\n      })\n    } else if(type === 'TMAP'){\n     console.log(\"开发中...\");\n    }\n    return pathList\n  }\n// 围栏数据转换\n/**\n * 高德：\n圆形围栏数据：\n{\"center\":\"116.344132,40.061937\",\"radius\":5000}\n多边形围栏数据：\n{\"points\":\"116.341622,40.063412;116.346729,40.064546;116.347072,40.060358;116.342373,40.059553\"}\n线形围栏数据：\n{\"bufferradius\":200,\"points\":\"116.347115,40.060325;116.342909,40.05957;116.336493,40.058338\"}\n行政区围栏：\n{\"adcode\":110105}\n\n * 百度：\n圆形围栏数据：\n{\"latitude\":\"40.061937\",\"radius\":5000,\"longitude\":\"116.344132\"}\n多边形围栏数据：\n{\"vertexes\":\"40.063412,116.341622;40.064546,116.346729;40.060358,116.347072;40.059553,116.342373\"}\n线形围栏数据：\n{\"offset\":200,\"vertexes\":\"40.060325,116.347115;40.05957,116.342909;40.058338,116.336493\"}\n行政区围栏：\n{\"keyword\":\"北京市\"}\n * **/\nexport function fenceDataChange(type:string,shape:string,data:any){\n  let fenceData:any = {}\n  // 高德地图 圆形围栏\n  if (type === 'AMAP' && shape === 'CIRCLE'){\n    fenceData.point = data.center.split(',')\n    fenceData.radius = data.radius\n    fenceData.type = 'circle'\n  // 高德地图 多边形围栏\n  } else if ((type === 'AMAP' && shape === 'POLYGON') ){\n    fenceData.type = 'polygon'\n    const dataArray = data.points.split(';')\n    fenceData.points = dataArray.length > 0 && dataArray.map((it:string) => {\n      const point = it.split(',')\n      return {lng:point[0], lat: point[1]}\n    })\n    // 高德地图 线性形围栏\n  } else if(type === 'AMAP' && shape === 'POLYLINE'){\n    fenceData.type = 'polyline'\n    const dataArray = data.points.split(';')\n    fenceData.offset = data.bufferradius\n    fenceData.points = dataArray.length > 0 && dataArray.map((it:string) => {\n      const point = it.split(',')\n      return {lng:point[0], lat: point[1]}\n    })\n    // 高德地图 行政区域围栏\n  } else if(type === 'AMAP' && shape === 'DISTRICT'){\n    fenceData.type = 'district'\n    fenceData.adcodes = [data.adcode]\n    // 百度地图 圆形围栏\n  } else if (type === 'BMAP' && shape === 'CIRCLE'){\n    fenceData.point = [data.longitude, data.latitude]\n    fenceData.radius = data.radius\n    fenceData.type = 'circle'\n    // 百度地图 多边形围栏\n  } else if ((type === 'BMAP' && shape === 'POLYGON')){\n    fenceData.type = 'polygon'\n    const dataArray = data.vertexes.split(';')\n    fenceData.points = dataArray.length > 0 && dataArray.map((it:string) => {\n      const point = it.split(',')\n      return {lng:point[1], lat: point[0]}\n    })\n    // 百度地图 线性形围栏\n  } else if (type === 'BMAP' && shape === 'POLYLINE'){\n    fenceData.type = 'polyline'\n    fenceData.offset = data.offset\n    const dataArray = data.vertexes.split(';')\n    fenceData.points = dataArray.length > 0 && dataArray.map((it:string) => {\n      const point = it.split(',')\n      return {lng:point[1], lat: point[0]}\n    })\n    // 百度地图 行政区域形围栏\n  } else if (type === 'BMAP' && shape === 'DISTRICT'){\n    fenceData.type = 'district'\n    fenceData.proname = data.keyword\n  }\n\n  return fenceData\n}\n// 安毫秒转换为时、（h）、分(m)、秒(s)\nexport function timeFormat(data:string | number):string{\n    let time:string = '--';\n    if (data && data < 60000){\n      time = Number(data)/1000 + 's'\n    }  \n    if (data && data >= 60000 && data < 3600000) {\n      time = Number(data)/60000 + 'm'\n    }\n    if (data && data > 3600000) {\n      time = Number(data)/3600000 + 'H'\n    }\n    return time;\n}"],"names":["request","options","axios","apiUserLogin","data","method","url","params","apiSysConfig","apiTraceServer","apiTraceList","apiTraceImgUrl","apiDeleteTrace","id","apiFenceList","apiDeleteFence","fenceId","apiTerminal","apiDeleteTerminalld","config","token","getToken","headers","Authorization","error","Promise","reject","response","status","code","removeToken","window","location","href","MessagePlugin","msg","Error","resolve","message","CZMap","CMap","this","props","style","width","height","Component","BreadcrumbItem","Breadcrumb","listData","state","pathData","JSON","parse","pointList","type","provider","drivingPath","pathChangeHandle","useState","imgURL","setImgUsrl","mapAk","poiText","poiIcon","points","areaName","zoom","enableScrollWheel","isScaleCtrl","isZoomCtrl","navi3DCtrl","useEffect","serverId","terminalId","traceId","param","then","res","gettrajectoryImgUrl","className","maxItemWidth","theme","columns","align","ellipsis","colKey","title","cell","row","minWidth","distance","toFixed","timeFormat","time","startTime","moment","format","endTime","rowKey","verticalAlign","bordered","hover","src","path","pathList","map","it","longitude","latitude","point","split","console","log","fenceDataChange","shape","fenceData","center","radius","dataArray","length","lng","lat","offset","bufferradius","adcodes","adcode","vertexes","proname","keyword","Number"],"sourceRoot":""}